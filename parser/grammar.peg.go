// Code generated by pigeon; DO NOT EDIT.

// DO NOT EDIT. Code generated by pigeon, run "go generate" to update.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"path/filepath"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

type namespace struct {
	scope     string
	namespace string
}

type exception *Struct

type union *Struct

type include string

func toIfaceSlice(v interface{}) []interface{} {
	if v == nil {
		return nil
	}
	return v.([]interface{})
}

func ifaceSliceToString(v interface{}) string {
	ifs := toIfaceSlice(v)
	b := make([]byte, len(ifs))
	for i, v := range ifs {
		b[i] = v.([]uint8)[0]
	}
	return string(b)
}

// toStruct converts a union to a struct with all fields optional.
func unionToStruct(u union) *Struct {
	st := (*Struct)(u)
	for _, f := range st.Fields {
		f.Optional = true
	}
	return st
}

func toAnnotations(v interface{}) []*Annotation {
	if v == nil {
		return nil
	}
	return v.([]*Annotation)
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Grammar",
			pos:  position{line: 56, col: 1, offset: 860},
			expr: &actionExpr{
				pos: position{line: 56, col: 11, offset: 872},
				run: (*parser).callonGrammar1,
				expr: &seqExpr{
					pos: position{line: 56, col: 11, offset: 872},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 56, col: 11, offset: 872},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 14, offset: 875},
							label: "statements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 25, offset: 886},
								expr: &seqExpr{
									pos: position{line: 56, col: 27, offset: 888},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 56, col: 27, offset: 888},
											name: "Statement",
										},
										&ruleRefExpr{
											pos:  position{line: 56, col: 37, offset: 898},
											name: "__",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 56, col: 44, offset: 905},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 56, col: 44, offset: 905},
									name: "EOF",
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 50, offset: 911},
									name: "SyntaxError",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SyntaxError",
			pos:  position{line: 100, col: 1, offset: 2081},
			expr: &actionExpr{
				pos: position{line: 100, col: 15, offset: 2097},
				run: (*parser).callonSyntaxError1,
				expr: &anyMatcher{
					line: 100, col: 15, offset: 2097,
				},
			},
		},
		{
			name: "Include",
			pos:  position{line: 104, col: 1, offset: 2152},
			expr: &actionExpr{
				pos: position{line: 104, col: 11, offset: 2164},
				run: (*parser).callonInclude1,
				expr: &seqExpr{
					pos: position{line: 104, col: 11, offset: 2164},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 104, col: 11, offset: 2164},
							val:        "include",
							ignoreCase: false,
							want:       "\"include\"",
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 21, offset: 2174},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 104, col: 23, offset: 2176},
							label: "file",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 28, offset: 2181},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 36, offset: 2189},
							name: "EOS",
						},
					},
				},
			},
		},
		{
			name: "Statement",
			pos:  position{line: 108, col: 1, offset: 2234},
			expr: &choiceExpr{
				pos: position{line: 108, col: 13, offset: 2248},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 108, col: 13, offset: 2248},
						name: "Include",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 23, offset: 2258},
						name: "Namespace",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 35, offset: 2270},
						name: "Const",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 43, offset: 2278},
						name: "Enum",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 50, offset: 2285},
						name: "TypeDef",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 60, offset: 2295},
						name: "Struct",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 69, offset: 2304},
						name: "Exception",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 81, offset: 2316},
						name: "Union",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 89, offset: 2324},
						name: "Service",
					},
				},
			},
		},
		{
			name: "Namespace",
			pos:  position{line: 110, col: 1, offset: 2333},
			expr: &actionExpr{
				pos: position{line: 110, col: 13, offset: 2347},
				run: (*parser).callonNamespace1,
				expr: &seqExpr{
					pos: position{line: 110, col: 13, offset: 2347},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 110, col: 13, offset: 2347},
							val:        "namespace",
							ignoreCase: false,
							want:       "\"namespace\"",
						},
						&ruleRefExpr{
							pos:  position{line: 110, col: 25, offset: 2359},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 110, col: 27, offset: 2361},
							label: "scope",
							expr: &oneOrMoreExpr{
								pos: position{line: 110, col: 33, offset: 2367},
								expr: &charClassMatcher{
									pos:        position{line: 110, col: 33, offset: 2367},
									val:        "[*a-z.-]",
									chars:      []rune{'*', '.', '-'},
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 110, col: 43, offset: 2377},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 110, col: 45, offset: 2379},
							label: "ns",
							expr: &ruleRefExpr{
								pos:  position{line: 110, col: 48, offset: 2382},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 110, col: 59, offset: 2393},
							name: "EOS",
						},
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 117, col: 1, offset: 2504},
			expr: &actionExpr{
				pos: position{line: 117, col: 9, offset: 2514},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 117, col: 9, offset: 2514},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 117, col: 9, offset: 2514},
							val:        "const",
							ignoreCase: false,
							want:       "\"const\"",
						},
						&ruleRefExpr{
							pos:  position{line: 117, col: 17, offset: 2522},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 117, col: 19, offset: 2524},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 23, offset: 2528},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 117, col: 33, offset: 2538},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 117, col: 35, offset: 2540},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 40, offset: 2545},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 117, col: 51, offset: 2556},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 117, col: 54, offset: 2559},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 117, col: 58, offset: 2563},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 117, col: 61, offset: 2566},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 67, offset: 2572},
								name: "ConstValue",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 117, col: 78, offset: 2583},
							name: "EOS",
						},
					},
				},
			},
		},
		{
			name: "Enum",
			pos:  position{line: 125, col: 1, offset: 2691},
			expr: &actionExpr{
				pos: position{line: 125, col: 8, offset: 2700},
				run: (*parser).callonEnum1,
				expr: &seqExpr{
					pos: position{line: 125, col: 8, offset: 2700},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 125, col: 8, offset: 2700},
							val:        "enum",
							ignoreCase: false,
							want:       "\"enum\"",
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 15, offset: 2707},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 125, col: 17, offset: 2709},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 22, offset: 2714},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 33, offset: 2725},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 125, col: 36, offset: 2728},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 40, offset: 2732},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 125, col: 43, offset: 2735},
							label: "values",
							expr: &zeroOrMoreExpr{
								pos: position{line: 125, col: 50, offset: 2742},
								expr: &seqExpr{
									pos: position{line: 125, col: 51, offset: 2743},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 125, col: 51, offset: 2743},
											name: "EnumValue",
										},
										&ruleRefExpr{
											pos:  position{line: 125, col: 61, offset: 2753},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 125, col: 66, offset: 2758},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 70, offset: 2762},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 125, col: 72, offset: 2764},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 125, col: 84, offset: 2776},
								expr: &ruleRefExpr{
									pos:  position{line: 125, col: 84, offset: 2776},
									name: "TypeAnnotations",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 101, offset: 2793},
							name: "EOS",
						},
					},
				},
			},
		},
		{
			name: "EnumValue",
			pos:  position{line: 149, col: 1, offset: 3352},
			expr: &actionExpr{
				pos: position{line: 149, col: 13, offset: 3366},
				run: (*parser).callonEnumValue1,
				expr: &seqExpr{
					pos: position{line: 149, col: 13, offset: 3366},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 149, col: 13, offset: 3366},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 149, col: 18, offset: 3371},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 149, col: 29, offset: 3382},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 149, col: 31, offset: 3384},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 149, col: 37, offset: 3390},
								expr: &seqExpr{
									pos: position{line: 149, col: 38, offset: 3391},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 149, col: 38, offset: 3391},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
										&ruleRefExpr{
											pos:  position{line: 149, col: 42, offset: 3395},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 149, col: 44, offset: 3397},
											name: "IntConstant",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 149, col: 58, offset: 3411},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 149, col: 60, offset: 3413},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 149, col: 72, offset: 3425},
								expr: &ruleRefExpr{
									pos:  position{line: 149, col: 72, offset: 3425},
									name: "TypeAnnotations",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 149, col: 89, offset: 3442},
							expr: &ruleRefExpr{
								pos:  position{line: 149, col: 89, offset: 3442},
								name: "ListSeparator",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeDef",
			pos:  position{line: 161, col: 1, offset: 3664},
			expr: &actionExpr{
				pos: position{line: 161, col: 11, offset: 3676},
				run: (*parser).callonTypeDef1,
				expr: &seqExpr{
					pos: position{line: 161, col: 11, offset: 3676},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 161, col: 11, offset: 3676},
							val:        "typedef",
							ignoreCase: false,
							want:       "\"typedef\"",
						},
						&ruleRefExpr{
							pos:  position{line: 161, col: 21, offset: 3686},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 161, col: 23, offset: 3688},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 161, col: 27, offset: 3692},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 161, col: 37, offset: 3702},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 161, col: 39, offset: 3704},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 161, col: 44, offset: 3709},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 161, col: 55, offset: 3720},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 161, col: 57, offset: 3722},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 161, col: 69, offset: 3734},
								expr: &ruleRefExpr{
									pos:  position{line: 161, col: 69, offset: 3734},
									name: "TypeAnnotations",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 161, col: 86, offset: 3751},
							name: "EOS",
						},
					},
				},
			},
		},
		{
			name: "Struct",
			pos:  position{line: 169, col: 1, offset: 3886},
			expr: &actionExpr{
				pos: position{line: 169, col: 10, offset: 3897},
				run: (*parser).callonStruct1,
				expr: &seqExpr{
					pos: position{line: 169, col: 10, offset: 3897},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 169, col: 10, offset: 3897},
							val:        "struct",
							ignoreCase: false,
							want:       "\"struct\"",
						},
						&ruleRefExpr{
							pos:  position{line: 169, col: 19, offset: 3906},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 169, col: 21, offset: 3908},
							label: "st",
							expr: &ruleRefExpr{
								pos:  position{line: 169, col: 24, offset: 3911},
								name: "StructLike",
							},
						},
					},
				},
			},
		},
		{
			name: "Exception",
			pos:  position{line: 170, col: 1, offset: 3951},
			expr: &actionExpr{
				pos: position{line: 170, col: 13, offset: 3965},
				run: (*parser).callonException1,
				expr: &seqExpr{
					pos: position{line: 170, col: 13, offset: 3965},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 170, col: 13, offset: 3965},
							val:        "exception",
							ignoreCase: false,
							want:       "\"exception\"",
						},
						&ruleRefExpr{
							pos:  position{line: 170, col: 25, offset: 3977},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 27, offset: 3979},
							label: "st",
							expr: &ruleRefExpr{
								pos:  position{line: 170, col: 30, offset: 3982},
								name: "StructLike",
							},
						},
					},
				},
			},
		},
		{
			name: "Union",
			pos:  position{line: 171, col: 1, offset: 4033},
			expr: &actionExpr{
				pos: position{line: 171, col: 9, offset: 4043},
				run: (*parser).callonUnion1,
				expr: &seqExpr{
					pos: position{line: 171, col: 9, offset: 4043},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 171, col: 9, offset: 4043},
							val:        "union",
							ignoreCase: false,
							want:       "\"union\"",
						},
						&ruleRefExpr{
							pos:  position{line: 171, col: 17, offset: 4051},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 19, offset: 4053},
							label: "st",
							expr: &ruleRefExpr{
								pos:  position{line: 171, col: 22, offset: 4056},
								name: "StructLike",
							},
						},
					},
				},
			},
		},
		{
			name: "StructLike",
			pos:  position{line: 172, col: 1, offset: 4103},
			expr: &actionExpr{
				pos: position{line: 172, col: 14, offset: 4118},
				run: (*parser).callonStructLike1,
				expr: &seqExpr{
					pos: position{line: 172, col: 14, offset: 4118},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 172, col: 14, offset: 4118},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 172, col: 19, offset: 4123},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 30, offset: 4134},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 172, col: 33, offset: 4137},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 37, offset: 4141},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 172, col: 40, offset: 4144},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 172, col: 47, offset: 4151},
								name: "FieldList",
							},
						},
						&litMatcher{
							pos:        position{line: 172, col: 57, offset: 4161},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 61, offset: 4165},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 172, col: 63, offset: 4167},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 172, col: 75, offset: 4179},
								expr: &ruleRefExpr{
									pos:  position{line: 172, col: 75, offset: 4179},
									name: "TypeAnnotations",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 92, offset: 4196},
							name: "EOS",
						},
					},
				},
			},
		},
		{
			name: "FieldList",
			pos:  position{line: 183, col: 1, offset: 4373},
			expr: &actionExpr{
				pos: position{line: 183, col: 13, offset: 4387},
				run: (*parser).callonFieldList1,
				expr: &labeledExpr{
					pos:   position{line: 183, col: 13, offset: 4387},
					label: "fields",
					expr: &zeroOrMoreExpr{
						pos: position{line: 183, col: 20, offset: 4394},
						expr: &seqExpr{
							pos: position{line: 183, col: 21, offset: 4395},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 183, col: 21, offset: 4395},
									name: "Field",
								},
								&ruleRefExpr{
									pos:  position{line: 183, col: 27, offset: 4401},
									name: "__",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 192, col: 1, offset: 4561},
			expr: &actionExpr{
				pos: position{line: 192, col: 9, offset: 4571},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 192, col: 9, offset: 4571},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 192, col: 9, offset: 4571},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 12, offset: 4574},
								name: "IntConstant",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 192, col: 24, offset: 4586},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 192, col: 26, offset: 4588},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 192, col: 30, offset: 4592},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 32, offset: 4594},
							label: "req",
							expr: &zeroOrOneExpr{
								pos: position{line: 192, col: 36, offset: 4598},
								expr: &ruleRefExpr{
									pos:  position{line: 192, col: 36, offset: 4598},
									name: "FieldReq",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 192, col: 46, offset: 4608},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 48, offset: 4610},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 52, offset: 4614},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 192, col: 62, offset: 4624},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 64, offset: 4626},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 69, offset: 4631},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 192, col: 80, offset: 4642},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 83, offset: 4645},
							label: "def",
							expr: &zeroOrOneExpr{
								pos: position{line: 192, col: 87, offset: 4649},
								expr: &seqExpr{
									pos: position{line: 192, col: 88, offset: 4650},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 192, col: 88, offset: 4650},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
										&ruleRefExpr{
											pos:  position{line: 192, col: 92, offset: 4654},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 192, col: 94, offset: 4656},
											name: "ConstValue",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 192, col: 107, offset: 4669},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 109, offset: 4671},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 192, col: 121, offset: 4683},
								expr: &ruleRefExpr{
									pos:  position{line: 192, col: 121, offset: 4683},
									name: "TypeAnnotations",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 192, col: 138, offset: 4700},
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 138, offset: 4700},
								name: "ListSeparator",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldReq",
			pos:  position{line: 208, col: 1, offset: 5003},
			expr: &actionExpr{
				pos: position{line: 208, col: 12, offset: 5016},
				run: (*parser).callonFieldReq1,
				expr: &choiceExpr{
					pos: position{line: 208, col: 13, offset: 5017},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 208, col: 13, offset: 5017},
							val:        "required",
							ignoreCase: false,
							want:       "\"required\"",
						},
						&litMatcher{
							pos:        position{line: 208, col: 26, offset: 5030},
							val:        "optional",
							ignoreCase: false,
							want:       "\"optional\"",
						},
					},
				},
			},
		},
		{
			name: "Service",
			pos:  position{line: 212, col: 1, offset: 5101},
			expr: &actionExpr{
				pos: position{line: 212, col: 11, offset: 5113},
				run: (*parser).callonService1,
				expr: &seqExpr{
					pos: position{line: 212, col: 11, offset: 5113},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 212, col: 11, offset: 5113},
							val:        "service",
							ignoreCase: false,
							want:       "\"service\"",
						},
						&ruleRefExpr{
							pos:  position{line: 212, col: 21, offset: 5123},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 212, col: 23, offset: 5125},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 212, col: 28, offset: 5130},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 212, col: 39, offset: 5141},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 212, col: 41, offset: 5143},
							label: "extends",
							expr: &zeroOrOneExpr{
								pos: position{line: 212, col: 49, offset: 5151},
								expr: &seqExpr{
									pos: position{line: 212, col: 50, offset: 5152},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 212, col: 50, offset: 5152},
											val:        "extends",
											ignoreCase: false,
											want:       "\"extends\"",
										},
										&ruleRefExpr{
											pos:  position{line: 212, col: 60, offset: 5162},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 212, col: 63, offset: 5165},
											name: "Identifier",
										},
										&ruleRefExpr{
											pos:  position{line: 212, col: 74, offset: 5176},
											name: "__",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 212, col: 79, offset: 5181},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 212, col: 82, offset: 5184},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 212, col: 86, offset: 5188},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 212, col: 89, offset: 5191},
							label: "methods",
							expr: &zeroOrMoreExpr{
								pos: position{line: 212, col: 97, offset: 5199},
								expr: &seqExpr{
									pos: position{line: 212, col: 98, offset: 5200},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 212, col: 98, offset: 5200},
											name: "Function",
										},
										&ruleRefExpr{
											pos:  position{line: 212, col: 107, offset: 5209},
											name: "__",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 212, col: 113, offset: 5215},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 212, col: 113, offset: 5215},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&ruleRefExpr{
									pos:  position{line: 212, col: 119, offset: 5221},
									name: "EndOfServiceError",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 212, col: 138, offset: 5240},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 212, col: 140, offset: 5242},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 212, col: 152, offset: 5254},
								expr: &ruleRefExpr{
									pos:  position{line: 212, col: 152, offset: 5254},
									name: "TypeAnnotations",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 212, col: 170, offset: 5272},
							name: "EOS",
						},
					},
				},
			},
		},
		{
			name: "EndOfServiceError",
			pos:  position{line: 228, col: 1, offset: 5656},
			expr: &actionExpr{
				pos: position{line: 228, col: 21, offset: 5678},
				run: (*parser).callonEndOfServiceError1,
				expr: &anyMatcher{
					line: 228, col: 21, offset: 5678,
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 232, col: 1, offset: 5744},
			expr: &actionExpr{
				pos: position{line: 232, col: 12, offset: 5757},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 232, col: 12, offset: 5757},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 232, col: 12, offset: 5757},
							label: "oneway",
							expr: &zeroOrOneExpr{
								pos: position{line: 232, col: 19, offset: 5764},
								expr: &seqExpr{
									pos: position{line: 232, col: 20, offset: 5765},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 232, col: 20, offset: 5765},
											val:        "oneway",
											ignoreCase: false,
											want:       "\"oneway\"",
										},
										&ruleRefExpr{
											pos:  position{line: 232, col: 29, offset: 5774},
											name: "__",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 232, col: 34, offset: 5779},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 38, offset: 5783},
								name: "FunctionType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 51, offset: 5796},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 232, col: 54, offset: 5799},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 59, offset: 5804},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 70, offset: 5815},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 232, col: 72, offset: 5817},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 76, offset: 5821},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 232, col: 79, offset: 5824},
							label: "arguments",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 89, offset: 5834},
								name: "FieldList",
							},
						},
						&litMatcher{
							pos:        position{line: 232, col: 99, offset: 5844},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 103, offset: 5848},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 232, col: 106, offset: 5851},
							label: "exceptions",
							expr: &zeroOrOneExpr{
								pos: position{line: 232, col: 117, offset: 5862},
								expr: &ruleRefExpr{
									pos:  position{line: 232, col: 117, offset: 5862},
									name: "Throws",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 125, offset: 5870},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 232, col: 127, offset: 5872},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 232, col: 139, offset: 5884},
								expr: &ruleRefExpr{
									pos:  position{line: 232, col: 139, offset: 5884},
									name: "TypeAnnotations",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 232, col: 156, offset: 5901},
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 156, offset: 5901},
								name: "ListSeparator",
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionType",
			pos:  position{line: 256, col: 1, offset: 6325},
			expr: &actionExpr{
				pos: position{line: 256, col: 16, offset: 6342},
				run: (*parser).callonFunctionType1,
				expr: &labeledExpr{
					pos:   position{line: 256, col: 16, offset: 6342},
					label: "typ",
					expr: &choiceExpr{
						pos: position{line: 256, col: 21, offset: 6347},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 256, col: 21, offset: 6347},
								val:        "void",
								ignoreCase: false,
								want:       "\"void\"",
							},
							&ruleRefExpr{
								pos:  position{line: 256, col: 30, offset: 6356},
								name: "FieldType",
							},
						},
					},
				},
			},
		},
		{
			name: "Throws",
			pos:  position{line: 263, col: 1, offset: 6463},
			expr: &actionExpr{
				pos: position{line: 263, col: 10, offset: 6474},
				run: (*parser).callonThrows1,
				expr: &seqExpr{
					pos: position{line: 263, col: 10, offset: 6474},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 263, col: 10, offset: 6474},
							val:        "throws",
							ignoreCase: false,
							want:       "\"throws\"",
						},
						&ruleRefExpr{
							pos:  position{line: 263, col: 19, offset: 6483},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 263, col: 22, offset: 6486},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 263, col: 26, offset: 6490},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 263, col: 29, offset: 6493},
							label: "exceptions",
							expr: &ruleRefExpr{
								pos:  position{line: 263, col: 40, offset: 6504},
								name: "FieldList",
							},
						},
						&litMatcher{
							pos:        position{line: 263, col: 50, offset: 6514},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "FieldType",
			pos:  position{line: 267, col: 1, offset: 6547},
			expr: &actionExpr{
				pos: position{line: 267, col: 13, offset: 6561},
				run: (*parser).callonFieldType1,
				expr: &labeledExpr{
					pos:   position{line: 267, col: 13, offset: 6561},
					label: "typ",
					expr: &choiceExpr{
						pos: position{line: 267, col: 18, offset: 6566},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 267, col: 18, offset: 6566},
								name: "BaseType",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 29, offset: 6577},
								name: "ContainerType",
							},
							&ruleRefExpr{
								pos:  position{line: 267, col: 45, offset: 6593},
								name: "Identifier",
							},
						},
					},
				},
			},
		},
		{
			name: "DefinitionType",
			pos:  position{line: 274, col: 1, offset: 6703},
			expr: &actionExpr{
				pos: position{line: 274, col: 18, offset: 6722},
				run: (*parser).callonDefinitionType1,
				expr: &labeledExpr{
					pos:   position{line: 274, col: 18, offset: 6722},
					label: "typ",
					expr: &choiceExpr{
						pos: position{line: 274, col: 23, offset: 6727},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 274, col: 23, offset: 6727},
								name: "BaseType",
							},
							&ruleRefExpr{
								pos:  position{line: 274, col: 34, offset: 6738},
								name: "ContainerType",
							},
						},
					},
				},
			},
		},
		{
			name: "BaseType",
			pos:  position{line: 278, col: 1, offset: 6775},
			expr: &actionExpr{
				pos: position{line: 278, col: 12, offset: 6788},
				run: (*parser).callonBaseType1,
				expr: &seqExpr{
					pos: position{line: 278, col: 12, offset: 6788},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 278, col: 12, offset: 6788},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 17, offset: 6793},
								name: "BaseTypeName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 278, col: 30, offset: 6806},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 278, col: 32, offset: 6808},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 278, col: 44, offset: 6820},
								expr: &ruleRefExpr{
									pos:  position{line: 278, col: 44, offset: 6820},
									name: "TypeAnnotations",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BaseTypeName",
			pos:  position{line: 285, col: 1, offset: 6931},
			expr: &actionExpr{
				pos: position{line: 285, col: 17, offset: 6949},
				run: (*parser).callonBaseTypeName1,
				expr: &seqExpr{
					pos: position{line: 285, col: 17, offset: 6949},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 285, col: 18, offset: 6950},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 285, col: 18, offset: 6950},
									val:        "bool",
									ignoreCase: false,
									want:       "\"bool\"",
								},
								&litMatcher{
									pos:        position{line: 285, col: 27, offset: 6959},
									val:        "byte",
									ignoreCase: false,
									want:       "\"byte\"",
								},
								&litMatcher{
									pos:        position{line: 285, col: 36, offset: 6968},
									val:        "i16",
									ignoreCase: false,
									want:       "\"i16\"",
								},
								&litMatcher{
									pos:        position{line: 285, col: 44, offset: 6976},
									val:        "i32",
									ignoreCase: false,
									want:       "\"i32\"",
								},
								&litMatcher{
									pos:        position{line: 285, col: 52, offset: 6984},
									val:        "i64",
									ignoreCase: false,
									want:       "\"i64\"",
								},
								&litMatcher{
									pos:        position{line: 285, col: 60, offset: 6992},
									val:        "double",
									ignoreCase: false,
									want:       "\"double\"",
								},
								&litMatcher{
									pos:        position{line: 285, col: 71, offset: 7003},
									val:        "string",
									ignoreCase: false,
									want:       "\"string\"",
								},
								&litMatcher{
									pos:        position{line: 285, col: 82, offset: 7014},
									val:        "binary",
									ignoreCase: false,
									want:       "\"binary\"",
								},
							},
						},
						&notExpr{
							pos: position{line: 285, col: 93, offset: 7025},
							expr: &charClassMatcher{
								pos:        position{line: 285, col: 94, offset: 7026},
								val:        "[a-zA-Z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ContainerType",
			pos:  position{line: 289, col: 1, offset: 7072},
			expr: &actionExpr{
				pos: position{line: 289, col: 17, offset: 7090},
				run: (*parser).callonContainerType1,
				expr: &labeledExpr{
					pos:   position{line: 289, col: 17, offset: 7090},
					label: "typ",
					expr: &choiceExpr{
						pos: position{line: 289, col: 22, offset: 7095},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 289, col: 22, offset: 7095},
								name: "MapType",
							},
							&ruleRefExpr{
								pos:  position{line: 289, col: 32, offset: 7105},
								name: "SetType",
							},
							&ruleRefExpr{
								pos:  position{line: 289, col: 42, offset: 7115},
								name: "ListType",
							},
						},
					},
				},
			},
		},
		{
			name: "MapType",
			pos:  position{line: 293, col: 1, offset: 7147},
			expr: &actionExpr{
				pos: position{line: 293, col: 11, offset: 7159},
				run: (*parser).callonMapType1,
				expr: &seqExpr{
					pos: position{line: 293, col: 11, offset: 7159},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 293, col: 11, offset: 7159},
							expr: &ruleRefExpr{
								pos:  position{line: 293, col: 11, offset: 7159},
								name: "CppType",
							},
						},
						&litMatcher{
							pos:        position{line: 293, col: 20, offset: 7168},
							val:        "map",
							ignoreCase: false,
							want:       "\"map\"",
						},
						&ruleRefExpr{
							pos:  position{line: 293, col: 26, offset: 7174},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 293, col: 29, offset: 7177},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&ruleRefExpr{
							pos:  position{line: 293, col: 33, offset: 7181},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 293, col: 36, offset: 7184},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 293, col: 40, offset: 7188},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 293, col: 50, offset: 7198},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 293, col: 53, offset: 7201},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 293, col: 57, offset: 7205},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 293, col: 60, offset: 7208},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 293, col: 66, offset: 7214},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 293, col: 76, offset: 7224},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 293, col: 79, offset: 7227},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&ruleRefExpr{
							pos:  position{line: 293, col: 83, offset: 7231},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 293, col: 85, offset: 7233},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 293, col: 97, offset: 7245},
								expr: &ruleRefExpr{
									pos:  position{line: 293, col: 97, offset: 7245},
									name: "TypeAnnotations",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SetType",
			pos:  position{line: 302, col: 1, offset: 7400},
			expr: &actionExpr{
				pos: position{line: 302, col: 11, offset: 7412},
				run: (*parser).callonSetType1,
				expr: &seqExpr{
					pos: position{line: 302, col: 11, offset: 7412},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 302, col: 11, offset: 7412},
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 11, offset: 7412},
								name: "CppType",
							},
						},
						&litMatcher{
							pos:        position{line: 302, col: 20, offset: 7421},
							val:        "set",
							ignoreCase: false,
							want:       "\"set\"",
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 26, offset: 7427},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 302, col: 29, offset: 7430},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 33, offset: 7434},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 302, col: 36, offset: 7437},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 40, offset: 7441},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 50, offset: 7451},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 302, col: 53, offset: 7454},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 57, offset: 7458},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 302, col: 59, offset: 7460},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 302, col: 71, offset: 7472},
								expr: &ruleRefExpr{
									pos:  position{line: 302, col: 71, offset: 7472},
									name: "TypeAnnotations",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListType",
			pos:  position{line: 310, col: 1, offset: 7601},
			expr: &actionExpr{
				pos: position{line: 310, col: 12, offset: 7614},
				run: (*parser).callonListType1,
				expr: &seqExpr{
					pos: position{line: 310, col: 12, offset: 7614},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 310, col: 12, offset: 7614},
							val:        "list",
							ignoreCase: false,
							want:       "\"list\"",
						},
						&ruleRefExpr{
							pos:  position{line: 310, col: 19, offset: 7621},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 310, col: 22, offset: 7624},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&ruleRefExpr{
							pos:  position{line: 310, col: 26, offset: 7628},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 310, col: 29, offset: 7631},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 310, col: 33, offset: 7635},
								name: "FieldType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 310, col: 43, offset: 7645},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 310, col: 46, offset: 7648},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&ruleRefExpr{
							pos:  position{line: 310, col: 50, offset: 7652},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 310, col: 52, offset: 7654},
							label: "annotations",
							expr: &zeroOrOneExpr{
								pos: position{line: 310, col: 64, offset: 7666},
								expr: &ruleRefExpr{
									pos:  position{line: 310, col: 64, offset: 7666},
									name: "TypeAnnotations",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CppType",
			pos:  position{line: 318, col: 1, offset: 7796},
			expr: &actionExpr{
				pos: position{line: 318, col: 11, offset: 7808},
				run: (*parser).callonCppType1,
				expr: &seqExpr{
					pos: position{line: 318, col: 11, offset: 7808},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 318, col: 11, offset: 7808},
							val:        "cpp_type",
							ignoreCase: false,
							want:       "\"cpp_type\"",
						},
						&labeledExpr{
							pos:   position{line: 318, col: 22, offset: 7819},
							label: "cppType",
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 30, offset: 7827},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstValue",
			pos:  position{line: 322, col: 1, offset: 7861},
			expr: &choiceExpr{
				pos: position{line: 322, col: 14, offset: 7876},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 322, col: 14, offset: 7876},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 322, col: 24, offset: 7886},
						name: "DoubleConstant",
					},
					&ruleRefExpr{
						pos:  position{line: 322, col: 41, offset: 7903},
						name: "IntConstant",
					},
					&ruleRefExpr{
						pos:  position{line: 322, col: 55, offset: 7917},
						name: "ConstMap",
					},
					&ruleRefExpr{
						pos:  position{line: 322, col: 66, offset: 7928},
						name: "ConstList",
					},
					&ruleRefExpr{
						pos:  position{line: 322, col: 78, offset: 7940},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "TypeAnnotations",
			pos:  position{line: 324, col: 1, offset: 7952},
			expr: &actionExpr{
				pos: position{line: 324, col: 19, offset: 7972},
				run: (*parser).callonTypeAnnotations1,
				expr: &seqExpr{
					pos: position{line: 324, col: 19, offset: 7972},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 324, col: 19, offset: 7972},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 324, col: 23, offset: 7976},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 324, col: 26, offset: 7979},
							label: "annotations",
							expr: &zeroOrMoreExpr{
								pos: position{line: 324, col: 38, offset: 7991},
								expr: &ruleRefExpr{
									pos:  position{line: 324, col: 38, offset: 7991},
									name: "TypeAnnotation",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 324, col: 54, offset: 8007},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "TypeAnnotation",
			pos:  position{line: 332, col: 1, offset: 8153},
			expr: &actionExpr{
				pos: position{line: 332, col: 18, offset: 8172},
				run: (*parser).callonTypeAnnotation1,
				expr: &seqExpr{
					pos: position{line: 332, col: 18, offset: 8172},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 332, col: 18, offset: 8172},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 23, offset: 8177},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 332, col: 34, offset: 8188},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 332, col: 36, offset: 8190},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 332, col: 42, offset: 8196},
								expr: &actionExpr{
									pos: position{line: 332, col: 43, offset: 8197},
									run: (*parser).callonTypeAnnotation8,
									expr: &seqExpr{
										pos: position{line: 332, col: 43, offset: 8197},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 332, col: 43, offset: 8197},
												val:        "=",
												ignoreCase: false,
												want:       "\"=\"",
											},
											&ruleRefExpr{
												pos:  position{line: 332, col: 47, offset: 8201},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 332, col: 50, offset: 8204},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 332, col: 56, offset: 8210},
													name: "Literal",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 332, col: 88, offset: 8242},
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 88, offset: 8242},
								name: "ListSeparator",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 332, col: 103, offset: 8257},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "IntConstant",
			pos:  position{line: 343, col: 1, offset: 8420},
			expr: &actionExpr{
				pos: position{line: 343, col: 15, offset: 8436},
				run: (*parser).callonIntConstant1,
				expr: &seqExpr{
					pos: position{line: 343, col: 15, offset: 8436},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 343, col: 15, offset: 8436},
							expr: &charClassMatcher{
								pos:        position{line: 343, col: 15, offset: 8436},
								val:        "[-+]",
								chars:      []rune{'-', '+'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 343, col: 21, offset: 8442},
							expr: &ruleRefExpr{
								pos:  position{line: 343, col: 21, offset: 8442},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleConstant",
			pos:  position{line: 347, col: 1, offset: 8503},
			expr: &actionExpr{
				pos: position{line: 347, col: 18, offset: 8522},
				run: (*parser).callonDoubleConstant1,
				expr: &seqExpr{
					pos: position{line: 347, col: 18, offset: 8522},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 347, col: 18, offset: 8522},
							expr: &charClassMatcher{
								pos:        position{line: 347, col: 18, offset: 8522},
								val:        "[+-]",
								chars:      []rune{'+', '-'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 347, col: 24, offset: 8528},
							expr: &ruleRefExpr{
								pos:  position{line: 347, col: 24, offset: 8528},
								name: "Digit",
							},
						},
						&litMatcher{
							pos:        position{line: 347, col: 31, offset: 8535},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 347, col: 35, offset: 8539},
							expr: &ruleRefExpr{
								pos:  position{line: 347, col: 35, offset: 8539},
								name: "Digit",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 347, col: 42, offset: 8546},
							expr: &seqExpr{
								pos: position{line: 347, col: 44, offset: 8548},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 347, col: 44, offset: 8548},
										val:        "['Ee']",
										chars:      []rune{'\'', 'E', 'e', '\''},
										ignoreCase: false,
										inverted:   false,
									},
									&ruleRefExpr{
										pos:  position{line: 347, col: 51, offset: 8555},
										name: "IntConstant",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConstList",
			pos:  position{line: 351, col: 1, offset: 8622},
			expr: &actionExpr{
				pos: position{line: 351, col: 13, offset: 8636},
				run: (*parser).callonConstList1,
				expr: &seqExpr{
					pos: position{line: 351, col: 13, offset: 8636},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 351, col: 13, offset: 8636},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 351, col: 17, offset: 8640},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 351, col: 20, offset: 8643},
							label: "values",
							expr: &zeroOrMoreExpr{
								pos: position{line: 351, col: 27, offset: 8650},
								expr: &seqExpr{
									pos: position{line: 351, col: 28, offset: 8651},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 351, col: 28, offset: 8651},
											name: "ConstValue",
										},
										&ruleRefExpr{
											pos:  position{line: 351, col: 39, offset: 8662},
											name: "__",
										},
										&zeroOrOneExpr{
											pos: position{line: 351, col: 42, offset: 8665},
											expr: &ruleRefExpr{
												pos:  position{line: 351, col: 42, offset: 8665},
												name: "ListSeparator",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 351, col: 57, offset: 8680},
											name: "__",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 351, col: 62, offset: 8685},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 351, col: 65, offset: 8688},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ConstMap",
			pos:  position{line: 360, col: 1, offset: 8861},
			expr: &actionExpr{
				pos: position{line: 360, col: 12, offset: 8874},
				run: (*parser).callonConstMap1,
				expr: &seqExpr{
					pos: position{line: 360, col: 12, offset: 8874},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 360, col: 12, offset: 8874},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 360, col: 16, offset: 8878},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 360, col: 19, offset: 8881},
							label: "values",
							expr: &zeroOrMoreExpr{
								pos: position{line: 360, col: 26, offset: 8888},
								expr: &seqExpr{
									pos: position{line: 360, col: 27, offset: 8889},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 360, col: 27, offset: 8889},
											name: "ConstValue",
										},
										&ruleRefExpr{
											pos:  position{line: 360, col: 38, offset: 8900},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 360, col: 41, offset: 8903},
											val:        ":",
											ignoreCase: false,
											want:       "\":\"",
										},
										&ruleRefExpr{
											pos:  position{line: 360, col: 45, offset: 8907},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 360, col: 48, offset: 8910},
											name: "ConstValue",
										},
										&ruleRefExpr{
											pos:  position{line: 360, col: 59, offset: 8921},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 360, col: 63, offset: 8925},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 360, col: 63, offset: 8925},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
												&andExpr{
													pos: position{line: 360, col: 69, offset: 8931},
													expr: &litMatcher{
														pos:        position{line: 360, col: 70, offset: 8932},
														val:        "}",
														ignoreCase: false,
														want:       "\"}\"",
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 360, col: 75, offset: 8937},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 360, col: 80, offset: 8942},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 376, col: 1, offset: 9188},
			expr: &actionExpr{
				pos: position{line: 376, col: 11, offset: 9200},
				run: (*parser).callonLiteral1,
				expr: &choiceExpr{
					pos: position{line: 376, col: 12, offset: 9201},
					alternatives: []any{
						&seqExpr{
							pos: position{line: 376, col: 13, offset: 9202},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 376, col: 13, offset: 9202},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 376, col: 17, offset: 9206},
									expr: &choiceExpr{
										pos: position{line: 376, col: 18, offset: 9207},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 376, col: 18, offset: 9207},
												val:        "\\\"",
												ignoreCase: false,
												want:       "\"\\\\\\\"\"",
											},
											&charClassMatcher{
												pos:        position{line: 376, col: 25, offset: 9214},
												val:        "[^\"]",
												chars:      []rune{'"'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 376, col: 32, offset: 9221},
									val:        "\"",
									ignoreCase: false,
									want:       "\"\\\"\"",
								},
							},
						},
						&seqExpr{
							pos: position{line: 376, col: 40, offset: 9229},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 376, col: 40, offset: 9229},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 376, col: 45, offset: 9234},
									expr: &choiceExpr{
										pos: position{line: 376, col: 46, offset: 9235},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 376, col: 46, offset: 9235},
												val:        "\\'",
												ignoreCase: false,
												want:       "\"\\\\'\"",
											},
											&charClassMatcher{
												pos:        position{line: 376, col: 53, offset: 9242},
												val:        "[^']",
												chars:      []rune{'\''},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 376, col: 60, offset: 9249},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 383, col: 1, offset: 9450},
			expr: &actionExpr{
				pos: position{line: 383, col: 14, offset: 9465},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 383, col: 14, offset: 9465},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 383, col: 14, offset: 9465},
							expr: &choiceExpr{
								pos: position{line: 383, col: 15, offset: 9466},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 383, col: 15, offset: 9466},
										name: "Letter",
									},
									&litMatcher{
										pos:        position{line: 383, col: 24, offset: 9475},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 383, col: 30, offset: 9481},
							expr: &choiceExpr{
								pos: position{line: 383, col: 31, offset: 9482},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 383, col: 31, offset: 9482},
										name: "Letter",
									},
									&ruleRefExpr{
										pos:  position{line: 383, col: 40, offset: 9491},
										name: "Digit",
									},
									&charClassMatcher{
										pos:        position{line: 383, col: 48, offset: 9499},
										val:        "[._]",
										chars:      []rune{'.', '_'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListSeparator",
			pos:  position{line: 387, col: 1, offset: 9551},
			expr: &charClassMatcher{
				pos:        position{line: 387, col: 17, offset: 9569},
				val:        "[,;]",
				chars:      []rune{',', ';'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Letter",
			pos:  position{line: 388, col: 1, offset: 9574},
			expr: &charClassMatcher{
				pos:        position{line: 388, col: 10, offset: 9585},
				val:        "[A-Za-z]",
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Digit",
			pos:  position{line: 389, col: 1, offset: 9594},
			expr: &charClassMatcher{
				pos:        position{line: 389, col: 9, offset: 9604},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "SourceChar",
			pos:  position{line: 393, col: 1, offset: 9615},
			expr: &anyMatcher{
				line: 393, col: 14, offset: 9630,
			},
		},
		{
			name: "Comment",
			pos:  position{line: 394, col: 1, offset: 9632},
			expr: &choiceExpr{
				pos: position{line: 394, col: 11, offset: 9644},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 394, col: 11, offset: 9644},
						name: "MultiLineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 394, col: 30, offset: 9663},
						name: "SingleLineComment",
					},
				},
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 395, col: 1, offset: 9681},
			expr: &seqExpr{
				pos: position{line: 395, col: 20, offset: 9702},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 395, col: 20, offset: 9702},
						val:        "/*",
						ignoreCase: false,
						want:       "\"/*\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 395, col: 25, offset: 9707},
						expr: &seqExpr{
							pos: position{line: 395, col: 27, offset: 9709},
							exprs: []any{
								&notExpr{
									pos: position{line: 395, col: 27, offset: 9709},
									expr: &litMatcher{
										pos:        position{line: 395, col: 28, offset: 9710},
										val:        "*/",
										ignoreCase: false,
										want:       "\"*/\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 395, col: 33, offset: 9715},
									name: "SourceChar",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 395, col: 47, offset: 9729},
						val:        "*/",
						ignoreCase: false,
						want:       "\"*/\"",
					},
				},
			},
		},
		{
			name: "MultiLineCommentNoLineTerminator",
			pos:  position{line: 396, col: 1, offset: 9734},
			expr: &seqExpr{
				pos: position{line: 396, col: 36, offset: 9771},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 396, col: 36, offset: 9771},
						val:        "/*",
						ignoreCase: false,
						want:       "\"/*\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 396, col: 41, offset: 9776},
						expr: &seqExpr{
							pos: position{line: 396, col: 43, offset: 9778},
							exprs: []any{
								&notExpr{
									pos: position{line: 396, col: 43, offset: 9778},
									expr: &choiceExpr{
										pos: position{line: 396, col: 46, offset: 9781},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 396, col: 46, offset: 9781},
												val:        "*/",
												ignoreCase: false,
												want:       "\"*/\"",
											},
											&ruleRefExpr{
												pos:  position{line: 396, col: 53, offset: 9788},
												name: "EOL",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 396, col: 59, offset: 9794},
									name: "SourceChar",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 396, col: 73, offset: 9808},
						val:        "*/",
						ignoreCase: false,
						want:       "\"*/\"",
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 397, col: 1, offset: 9813},
			expr: &choiceExpr{
				pos: position{line: 397, col: 21, offset: 9835},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 397, col: 22, offset: 9836},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 397, col: 22, offset: 9836},
								val:        "//",
								ignoreCase: false,
								want:       "\"//\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 397, col: 27, offset: 9841},
								expr: &seqExpr{
									pos: position{line: 397, col: 29, offset: 9843},
									exprs: []any{
										&notExpr{
											pos: position{line: 397, col: 29, offset: 9843},
											expr: &ruleRefExpr{
												pos:  position{line: 397, col: 30, offset: 9844},
												name: "EOL",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 397, col: 34, offset: 9848},
											name: "SourceChar",
										},
									},
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 397, col: 52, offset: 9866},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 397, col: 52, offset: 9866},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 397, col: 56, offset: 9870},
								expr: &seqExpr{
									pos: position{line: 397, col: 58, offset: 9872},
									exprs: []any{
										&notExpr{
											pos: position{line: 397, col: 58, offset: 9872},
											expr: &ruleRefExpr{
												pos:  position{line: 397, col: 59, offset: 9873},
												name: "EOL",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 397, col: 63, offset: 9877},
											name: "SourceChar",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 399, col: 1, offset: 9893},
			expr: &zeroOrMoreExpr{
				pos: position{line: 399, col: 6, offset: 9900},
				expr: &choiceExpr{
					pos: position{line: 399, col: 8, offset: 9902},
					alternatives: []any{
						&ruleRefExpr{
							pos:  position{line: 399, col: 8, offset: 9902},
							name: "Whitespace",
						},
						&ruleRefExpr{
							pos:  position{line: 399, col: 21, offset: 9915},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 399, col: 27, offset: 9921},
							name: "Comment",
						},
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 400, col: 1, offset: 9932},
			expr: &zeroOrMoreExpr{
				pos: position{line: 400, col: 5, offset: 9938},
				expr: &choiceExpr{
					pos: position{line: 400, col: 7, offset: 9940},
					alternatives: []any{
						&ruleRefExpr{
							pos:  position{line: 400, col: 7, offset: 9940},
							name: "Whitespace",
						},
						&ruleRefExpr{
							pos:  position{line: 400, col: 20, offset: 9953},
							name: "MultiLineCommentNoLineTerminator",
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 401, col: 1, offset: 9989},
			expr: &zeroOrMoreExpr{
				pos: position{line: 401, col: 6, offset: 9996},
				expr: &ruleRefExpr{
					pos:  position{line: 401, col: 6, offset: 9996},
					name: "Whitespace",
				},
			},
		},
		{
			name: "Whitespace",
			pos:  position{line: 403, col: 1, offset: 10009},
			expr: &charClassMatcher{
				pos:        position{line: 403, col: 14, offset: 10024},
				val:        "[ \\t\\r]",
				chars:      []rune{' ', '\t', '\r'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EOL",
			pos:  position{line: 404, col: 1, offset: 10032},
			expr: &litMatcher{
				pos:        position{line: 404, col: 7, offset: 10040},
				val:        "\n",
				ignoreCase: false,
				want:       "\"\\n\"",
			},
		},
		{
			name: "EOS",
			pos:  position{line: 405, col: 1, offset: 10045},
			expr: &choiceExpr{
				pos: position{line: 405, col: 7, offset: 10053},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 405, col: 7, offset: 10053},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 405, col: 7, offset: 10053},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 405, col: 10, offset: 10056},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 405, col: 16, offset: 10062},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 405, col: 16, offset: 10062},
								name: "_",
							},
							&zeroOrOneExpr{
								pos: position{line: 405, col: 18, offset: 10064},
								expr: &ruleRefExpr{
									pos:  position{line: 405, col: 18, offset: 10064},
									name: "SingleLineComment",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 405, col: 37, offset: 10083},
								name: "EOL",
							},
						},
					},
					&seqExpr{
						pos: position{line: 405, col: 43, offset: 10089},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 405, col: 43, offset: 10089},
								name: "__",
							},
							&ruleRefExpr{
								pos:  position{line: 405, col: 46, offset: 10092},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 407, col: 1, offset: 10097},
			expr: &notExpr{
				pos: position{line: 407, col: 7, offset: 10105},
				expr: &anyMatcher{
					line: 407, col: 8, offset: 10106,
				},
			},
		},
	},
}

func (c *current) onGrammar1(statements any) (any, error) {
	thrift := &Thrift{
		Includes:   make(map[string]string),
		Namespaces: make(map[string]string),
		Typedefs:   make(map[string]*Typedef),
		Constants:  make(map[string]*Constant),
		Enums:      make(map[string]*Enum),
		Structs:    make(map[string]*Struct),
		Exceptions: make(map[string]*Struct),
		Unions:     make(map[string]*Struct),
		Services:   make(map[string]*Service),
	}
	stmts := toIfaceSlice(statements)
	for _, st := range stmts {
		switch v := st.([]interface{})[0].(type) {
		case *namespace:
			thrift.Namespaces[v.scope] = v.namespace
		case *Constant:
			thrift.Constants[v.Name] = v
		case *Enum:
			thrift.Enums[v.Name] = v
		case *Typedef:
			thrift.Typedefs[v.Alias] = v
		case *Struct:
			thrift.Structs[v.Name] = v
		case exception:
			thrift.Exceptions[v.Name] = (*Struct)(v)
		case union:
			thrift.Unions[v.Name] = unionToStruct(v)
		case *Service:
			thrift.Services[v.Name] = v
		case include:
			name := filepath.Base(string(v))
			if ix := strings.LastIndex(name, "."); ix > 0 {
				name = name[:ix]
			}
			thrift.Includes[name] = string(v)
		default:
			return nil, fmt.Errorf("parser: unknown value %#v", v)
		}
	}
	return thrift, nil
}

func (p *parser) callonGrammar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrammar1(stack["statements"])
}

func (c *current) onSyntaxError1() (any, error) {
	return nil, errors.New("parser: syntax error")
}

func (p *parser) callonSyntaxError1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSyntaxError1()
}

func (c *current) onInclude1(file any) (any, error) {
	return include(file.(string)), nil
}

func (p *parser) callonInclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInclude1(stack["file"])
}

func (c *current) onNamespace1(scope, ns any) (any, error) {
	return &namespace{
		scope:     ifaceSliceToString(scope),
		namespace: string(ns.(Identifier)),
	}, nil
}

func (p *parser) callonNamespace1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamespace1(stack["scope"], stack["ns"])
}

func (c *current) onConst1(typ, name, value any) (any, error) {
	return &Constant{
		Name:  string(name.(Identifier)),
		Type:  typ.(*Type),
		Value: value,
	}, nil
}

func (p *parser) callonConst1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["typ"], stack["name"], stack["value"])
}

func (c *current) onEnum1(name, values, annotations any) (any, error) {
	vs := toIfaceSlice(values)
	en := &Enum{
		Name:        string(name.(Identifier)),
		Values:      make(map[string]*EnumValue, len(vs)),
		Annotations: toAnnotations(annotations),
	}
	// Assigns numbers in order. This will behave badly if some values are
	// defined and other are not, but I think that's ok since that's a silly
	// thing to do.
	next := 0
	for _, v := range vs {
		ev := v.([]interface{})[0].(*EnumValue)
		if ev.Value < 0 {
			ev.Value = next
		}
		if ev.Value >= next {
			next = ev.Value + 1
		}
		en.Values[ev.Name] = ev
	}
	return en, nil
}

func (p *parser) callonEnum1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnum1(stack["name"], stack["values"], stack["annotations"])
}

func (c *current) onEnumValue1(name, value, annotations any) (any, error) {
	ev := &EnumValue{
		Name:        string(name.(Identifier)),
		Value:       -1,
		Annotations: toAnnotations(annotations),
	}
	if value != nil {
		ev.Value = int(value.([]interface{})[2].(int64))
	}
	return ev, nil
}

func (p *parser) callonEnumValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnumValue1(stack["name"], stack["value"], stack["annotations"])
}

func (c *current) onTypeDef1(typ, name, annotations any) (any, error) {
	return &Typedef{
		Type:        typ.(*Type),
		Alias:       string(name.(Identifier)),
		Annotations: toAnnotations(annotations),
	}, nil
}

func (p *parser) callonTypeDef1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeDef1(stack["typ"], stack["name"], stack["annotations"])
}

func (c *current) onStruct1(st any) (any, error) {
	return st.(*Struct), nil
}

func (p *parser) callonStruct1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStruct1(stack["st"])
}

func (c *current) onException1(st any) (any, error) {
	return exception(st.(*Struct)), nil
}

func (p *parser) callonException1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onException1(stack["st"])
}

func (c *current) onUnion1(st any) (any, error) {
	return union(st.(*Struct)), nil
}

func (p *parser) callonUnion1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnion1(stack["st"])
}

func (c *current) onStructLike1(name, fields, annotations any) (any, error) {
	st := &Struct{
		Name:        string(name.(Identifier)),
		Annotations: toAnnotations(annotations),
	}
	if fields != nil {
		st.Fields = fields.([]*Field)
	}
	return st, nil
}

func (p *parser) callonStructLike1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStructLike1(stack["name"], stack["fields"], stack["annotations"])
}

func (c *current) onFieldList1(fields any) (any, error) {
	fs := fields.([]interface{})
	flds := make([]*Field, len(fs))
	for i, f := range fs {
		flds[i] = f.([]interface{})[0].(*Field)
	}
	return flds, nil
}

func (p *parser) callonFieldList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldList1(stack["fields"])
}

func (c *current) onField1(id, req, typ, name, def, annotations any) (any, error) {
	f := &Field{
		ID:          int(id.(int64)),
		Name:        string(name.(Identifier)),
		Type:        typ.(*Type),
		Annotations: toAnnotations(annotations),
	}
	if req != nil && !req.(bool) {
		f.Optional = true
	}
	if def != nil {
		f.Default = def.([]interface{})[2]
	}
	return f, nil
}

func (p *parser) callonField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["id"], stack["req"], stack["typ"], stack["name"], stack["def"], stack["annotations"])
}

func (c *current) onFieldReq1() (any, error) {
	return !bytes.Equal(c.text, []byte("optional")), nil
}

func (p *parser) callonFieldReq1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldReq1()
}

func (c *current) onService1(name, extends, methods, annotations any) (any, error) {
	ms := methods.([]interface{})
	svc := &Service{
		Name:        string(name.(Identifier)),
		Methods:     make(map[string]*Method, len(ms)),
		Annotations: toAnnotations(annotations),
	}
	if extends != nil {
		svc.Extends = string(extends.([]interface{})[2].(Identifier))
	}
	for _, m := range ms {
		mt := m.([]interface{})[0].(*Method)
		svc.Methods[mt.Name] = mt
	}
	return svc, nil
}

func (p *parser) callonService1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onService1(stack["name"], stack["extends"], stack["methods"], stack["annotations"])
}

func (c *current) onEndOfServiceError1() (any, error) {
	return nil, errors.New("parser: expected end of service")
}

func (p *parser) callonEndOfServiceError1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEndOfServiceError1()
}

func (c *current) onFunction1(oneway, typ, name, arguments, exceptions, annotations any) (any, error) {
	m := &Method{
		Name:        string(name.(Identifier)),
		Annotations: toAnnotations(annotations),
	}
	t := typ.(*Type)
	if t.Name != "void" {
		m.ReturnType = t
	}
	if oneway != nil {
		m.Oneway = true
	}
	if arguments != nil {
		m.Arguments = arguments.([]*Field)
	}
	if exceptions != nil {
		m.Exceptions = exceptions.([]*Field)
		for _, e := range m.Exceptions {
			e.Optional = true
		}
	}
	return m, nil
}

func (p *parser) callonFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["oneway"], stack["typ"], stack["name"], stack["arguments"], stack["exceptions"], stack["annotations"])
}

func (c *current) onFunctionType1(typ any) (any, error) {
	if t, ok := typ.(*Type); ok {
		return t, nil
	}
	return &Type{Name: string(c.text)}, nil
}

func (p *parser) callonFunctionType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionType1(stack["typ"])
}

func (c *current) onThrows1(exceptions any) (any, error) {
	return exceptions, nil
}

func (p *parser) callonThrows1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThrows1(stack["exceptions"])
}

func (c *current) onFieldType1(typ any) (any, error) {
	if t, ok := typ.(Identifier); ok {
		return &Type{Name: string(t)}, nil
	}
	return typ, nil
}

func (p *parser) callonFieldType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldType1(stack["typ"])
}

func (c *current) onDefinitionType1(typ any) (any, error) {
	return typ, nil
}

func (p *parser) callonDefinitionType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefinitionType1(stack["typ"])
}

func (c *current) onBaseType1(name, annotations any) (any, error) {
	return &Type{
		Name:        name.(string),
		Annotations: toAnnotations(annotations),
	}, nil
}

func (p *parser) callonBaseType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBaseType1(stack["name"], stack["annotations"])
}

func (c *current) onBaseTypeName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonBaseTypeName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBaseTypeName1()
}

func (c *current) onContainerType1(typ any) (any, error) {
	return typ, nil
}

func (p *parser) callonContainerType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContainerType1(stack["typ"])
}

func (c *current) onMapType1(key, value, annotations any) (any, error) {
	return &Type{
		Name:        "map",
		KeyType:     key.(*Type),
		ValueType:   value.(*Type),
		Annotations: toAnnotations(annotations),
	}, nil
}

func (p *parser) callonMapType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMapType1(stack["key"], stack["value"], stack["annotations"])
}

func (c *current) onSetType1(typ, annotations any) (any, error) {
	return &Type{
		Name:        "set",
		ValueType:   typ.(*Type),
		Annotations: toAnnotations(annotations),
	}, nil
}

func (p *parser) callonSetType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetType1(stack["typ"], stack["annotations"])
}

func (c *current) onListType1(typ, annotations any) (any, error) {
	return &Type{
		Name:        "list",
		ValueType:   typ.(*Type),
		Annotations: toAnnotations(annotations),
	}, nil
}

func (p *parser) callonListType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListType1(stack["typ"], stack["annotations"])
}

func (c *current) onCppType1(cppType any) (any, error) {
	return cppType, nil
}

func (p *parser) callonCppType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCppType1(stack["cppType"])
}

func (c *current) onTypeAnnotations1(annotations any) (any, error) {
	var anns []*Annotation
	for _, ann := range annotations.([]interface{}) {
		anns = append(anns, ann.(*Annotation))
	}
	return anns, nil
}

func (p *parser) callonTypeAnnotations1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAnnotations1(stack["annotations"])
}

func (c *current) onTypeAnnotation8(value any) (any, error) {
	return value, nil
}

func (p *parser) callonTypeAnnotation8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAnnotation8(stack["value"])
}

func (c *current) onTypeAnnotation1(name, value any) (any, error) {
	var optValue string
	if value != nil {
		optValue = value.(string)
	}
	return &Annotation{
		Name:  string(name.(Identifier)),
		Value: optValue,
	}, nil
}

func (p *parser) callonTypeAnnotation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAnnotation1(stack["name"], stack["value"])
}

func (c *current) onIntConstant1() (any, error) {
	return strconv.ParseInt(string(c.text), 10, 64)
}

func (p *parser) callonIntConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntConstant1()
}

func (c *current) onDoubleConstant1() (any, error) {
	return strconv.ParseFloat(string(c.text), 64)
}

func (p *parser) callonDoubleConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleConstant1()
}

func (c *current) onConstList1(values any) (any, error) {
	valueSlice := values.([]interface{})
	vs := make([]interface{}, len(valueSlice))
	for i, v := range valueSlice {
		vs[i] = v.([]interface{})[0]
	}
	return vs, nil
}

func (p *parser) callonConstList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstList1(stack["values"])
}

func (c *current) onConstMap1(values any) (any, error) {
	if values == nil {
		return nil, nil
	}
	vals := values.([]interface{})
	kvs := make([]KeyValue, len(vals))
	for i, kv := range vals {
		v := kv.([]interface{})
		kvs[i] = KeyValue{
			Key:   v[0],
			Value: v[4],
		}
	}
	return kvs, nil
}

func (p *parser) callonConstMap1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstMap1(stack["values"])
}

func (c *current) onLiteral1() (any, error) {
	if len(c.text) != 0 && c.text[0] == '\'' {
		return strconv.Unquote(`"` + strings.Replace(string(c.text[1:len(c.text)-1]), `\'`, `'`, -1) + `"`)
	}
	return strconv.Unquote(string(c.text))
}

func (p *parser) callonLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteral1()
}

func (c *current) onIdentifier1() (any, error) {
	return Identifier(string(c.text)), nil
}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
